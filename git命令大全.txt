git 命令大全


--------------------------------------------------------------------------------------------------------------
-- 管理修改

git add filename  将指定文件的修改提交到暂存区

git add . （当前目录下所有文件）将修改提交到暂存区

git commit -m "备注"  提交更改,实际就是把暂存区的所有内容提交到当前分支

git status 查看当前状态

git reset --hard HEAD^  恢复上一版本 （HEAD^^ 上上一次版本  依次类推）

git reset --hard commit_id  根据版本号恢复历史版本

git reflog  查看历史命令

git log  查看历史

git checkout -- filename  将指定文件在工作区的修改全部撤销
有两种情况：1、一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
          2、一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态
          
git reset HEAD file  可以把暂存区的修改撤销掉（及撤销git add file动作）  

--------------------------------------------------------------------------------------------------------------
--远程仓库

git init  在当前目录创建git仓库

git clone msa@197.3.84.27:BPM  从远程服务器克隆代码

gitHub 远程仓库地址：https://github.com/git-lizj/git-lizj.git

git remote add origin git@github.com:git-lizj/git-lizj.git  把本地库与远程库关联
备注：添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

git push -u origin master  把当前分支master推送到远程
备注：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。  

git push origin master    把本地master分支的最新修改推送至GitHub      


--------------------------------------------------------------------------------------------------------------
--分支管理

git branch  查看分支（当前分支前面标注有*）

git branch <name>  创建分支

git checkout <name>  切换分支

git checkout -b <name>  创建+切换分支

git merge <name> 合并某分支到当前分支  (Fast forward模式)

git merge --no-ff <name> -m "备注"  合并某分支到当前分支  (普通模式)

git branch -d <name> 删除分支

git branch -D <name> 未被合并的分支，删除时会提示报错，需要强制删除

git log --graph  可查看分支合并图

git stash 可将工作现场临时储藏起来  

git stash list 可查看储藏的工作现场

git stash pop 恢复工作现场，同时删除stash

git stash apply 恢复工作现场

git stash apply stash@{0}  你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash

git stash drop 删除stash

git remote -v  查看远程库信息

--------------------------------------------------------------------------------------------------------------
--多人协作

1、首先 git push orgigin <branch-name>  推送自己的修改；

2、如果推送失败，则因为远程分支比你的本地更新，需要先用 git pull 试图合并；

3、如果合并有冲突，则解决冲突，并在本地提交；

4、没有冲突或者解决掉冲突后，再用 git push origin <branch-name> 推送就能成功！

5、如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
  用命令git branch --set-upstream <branch-name> origin/<branch-name>

--------------------------------------------------------------------------------------------------------------
--标签管理

git tag <name>  用于新建一个标签，默认为HEAD，也可以指定一个commit id

git tag <name> <commit_id>

git tag  查看所有标签

git show <tagname> 查看标签信息

git tag -a <name> -m "备注" <commit_id>   建带有说明的标签，用-a指定标签名，-m指定说明文字
如：git tag -a v0.1 -m "version 0.1 released" 3628164


git tag -a <tagname> -m "blablabla..."   可以指定标签信息

git tag -s <tagname> -m "blablabla..."  可以用PGP签名标签
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错

git push origin <tagname>  可以推送一个本地标签

git push origin --tags  可以推送全部未推送过的本地标签

git tag -d <tagname>  可以删除一个本地标签

git push origin :refs/tags/<tagname>  可以删除一个远程标签


